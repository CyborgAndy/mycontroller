package mysensors

import mc "github.com/mycontroller-org/mycontroller/pkg"

//Value of the input
type Value int8

// CmdString map
var CmdString = map[uint8]string{
	0: mc.CmdPresentation,
	1: mc.CmdSet,
	2: mc.CmdRequest,
	3: mc.CmdInternal,
	4: mc.CmdStream,
}

// SenString map
var SenString = map[uint8]string{
	0:  mc.SenDoor,
	1:  mc.SenMotion,
	2:  mc.SenSmoke,
	3:  mc.SenBinary,
	4:  mc.SenLight,
	5:  mc.SenCover,
	6:  mc.SenTemperature,
	7:  mc.SenHumidity,
	8:  mc.SenBarometric,
	9:  mc.SenWind,
	10: mc.SenRain,
	11: mc.SenUV,
	12: mc.SenWeight,
	13: mc.SenPower,
	14: mc.SenHeater,
	15: mc.SenDistance,
	16: mc.SenLight,
	17: mc.SenCustom,
	18: mc.SenCustom,
	19: mc.SenLock,
	20: mc.SenIR,
	21: mc.SenWater,
	22: mc.SenAirQuality,
	23: mc.SenCustom,
	24: mc.SenDust,
	25: mc.SenSceneController,
	26: mc.SenRGBLight,
	27: mc.SenRGBWLight,
	28: mc.SenColorSensor,
	29: mc.SenHVAC,
	30: mc.SenMultimeter,
	31: mc.SenSprinkler,
	32: mc.SenWaterLeak,
	33: mc.SenSound,
	34: mc.SenVibration,
	35: mc.SenMoisture,
	36: mc.SenInfo,
	37: mc.SenGas,
	38: mc.SenGPS,
	39: mc.SenWaterQuality,
}

// SenDataString data
var SenDataString = map[uint8]string{
	0:  mc.VarTemperature,
	1:  mc.VarHumidity,
	2:  mc.VarStatus,
	3:  mc.VarPercentage,
	4:  mc.VarPressure,
	5:  mc.VarForecast,
	6:  mc.VarRain,
	7:  mc.VarRainrate,
	8:  mc.VarWind,
	9:  mc.VarGust,
	10: mc.VarDirection,
	11: mc.VarUV,
	12: mc.VarWeight,
	13: mc.VarDistance,
	14: mc.VarImpedance,
	15: mc.VarArmed,
	16: mc.VarTripped,
	17: mc.VarWatt,
	18: mc.VarKwh,
	19: mc.VarSceneOn,
	20: mc.VarSceneOff,
	21: mc.VarHVACFlowState,
	22: mc.VarHVACSpeed,
	23: mc.VarLightLevel,
	24: mc.VarCustom1,
	25: mc.VarCustom2,
	26: mc.VarCustom3,
	27: mc.VarCustom4,
	28: mc.VarCustom5,
	29: mc.VarUp,
	30: mc.VarDown,
	31: mc.VarStop,
	32: mc.VarIRSend,
	33: mc.VarIRReceive,
	34: mc.VarFlow,
	35: mc.VarVolume,
	36: mc.VarLockStatus,
	37: mc.VarLevel,
	38: mc.VarVoltage,
	39: mc.VarCurrent,
	40: mc.VarRGB,
	41: mc.VarRGBW,
	42: mc.VarID,
	43: mc.VarCustom,
	44: mc.VarHVACSetpointCool,
	45: mc.VarHVACSetpointHeat,
	46: mc.VarHVACFlowMode,
	47: mc.VarText,
	48: mc.VarCustom,
	49: mc.VarPosition,
	50: mc.VarIRRecord,
	51: mc.VarPH,
	52: mc.VarORP,
	53: mc.VarEC,
	54: mc.VarVar,
	55: mc.VarVA,
	56: mc.VarPowerFactor,
}

// InternalString data
var InternalString = map[uint8]string{
	0:  mc.IntBatteryLevel,
	1:  mc.IntTime,
	2:  mc.IntVersion,
	3:  mc.IntIDRequest,
	4:  mc.IntIDResponse,
	5:  mc.IntInclusionMode,
	6:  mc.IntConfig,
	7:  mc.IntFindParentRequest,
	8:  mc.IntFindParentResponse,
	9:  mc.IntLogMessage,
	10: mc.IntChildren,
	11: mc.IntNodeName,
	12: mc.IntNodeVersion,
	13: mc.IntReboot,
	14: mc.IntGatewayReady,
	15: mc.IntSigningPresentation,
	16: mc.IntNonceRequest,
	17: mc.IntNonceResponse,
	18: mc.IntHeartbeatRequest,
	19: mc.IntPresentation,
	20: mc.IntDiscoverRequest,
	21: mc.IntDiscoverResponse,
	22: mc.IntHeartbeatResponse,
	23: mc.IntLocked,
	24: mc.IntPing,
	25: mc.IntPong,
	26: mc.IntRegistrationRequest,
	27: mc.IntRegistrationResponse,
	28: mc.IntDebug,
	29: mc.IntSignalReportRequest,
	30: mc.IntSignalReportReverse,
	31: mc.IntSignalReportResponse,
	32: mc.IntPreSleepNotification,
	33: mc.IntPostSleepNotification,
}

// StreamString data
var StreamString = map[uint8]string{
	0: mc.StmFirmwareConfigRequest,
	1: mc.StmFirmwareConfigResponse,
	2: mc.StmFirmwareRequest,
	3: mc.StmFirmwareResponse,
	4: mc.StmSound,
	5: mc.StmImage,
	6: mc.StmFirmwareResponseRLE,
}
